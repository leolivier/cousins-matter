# Creates a multiplatform image of cousins matter and push it to ghcr.io for each new release

name: Image Build & Push

on:
  push:
  
  release:
    types: [prereleased, published]

  workflow_dispatch:


env:
  # The registry where the image will be pushed.
  REGISTRY: 'ghcr.io'
  # name of the docker image
  IMAGE_NAME: ${{ github.repository }}
  # a list of platform architecture to be built in the image.
  PLATFORMS: 'linux/amd64,linux/arm64'
  # Should the built image be pushed to the registry?
  PUSH: ${{ github.event_name == 'release' && true || github.event_name == 'push' && true || false }}
  # how to compute image tags
  TAGS_DEF: ${{ github.event_name == 'release' && 'type=semver,pattern={{version}}' || github.event_name == 'push' && 'type=ref,event=branch' || 'type=sha' }}
  # version of the application 
  # VERSION: ${{ github.event.release.tag_name || github.ref_name }}
  TEST_TAG: 'test-${{ github.sha }}'

jobs:
  test-build-image-publish:
    if: github.event_name == 'release' || github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: trace event trigger
        env:
          EVENT: ${{ toJson(github.event) }}
        run: |
          echo $EVENT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to get all tags

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Lint with flake8
        run: |
          python -m pip install flake8 tblib
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --indent-size 2 --exclude migrations

      - name: Login to GHCR.io
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.TAGS_DEF }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: get runner id
        id: get_runner_id
        run: |
          echo "RUNNER_ID=$(id -u)" >> $GITHUB_OUTPUT

      - name: Build for test
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          build-args: |
            UID=${{ steps.get_runner_id.outputs.RUNNER_ID }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TEST_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-buildcache,mode=max

      - name: Write .env
        run: |
          cat > .env <<'EOF'
          SECRET_KEY=
          SITE_NAME=My Beautiful Site
          ALLOWED_HOSTS=127.0.0.1,localhost
          LANGUAGE_CODE=fr
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=465
          EMAIL_HOST_USER=nobody@gmail.com
          EMAIL_HOST_PASSWORD=no matter
          POSTGRES_PASSWORD=
          EOF

      - name: Test Docker Image
        env:
          TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TEST_TAG }}
        run: |
          echo "Tested image is $TAG"
          # create the appropriate env before running
          export COUSINS_MATTER_IMAGE=$TAG
          python ./scripts/manage_cousins_matter.py install -e -n
          ls -al
          ls -al media static config 
          docker compose -f docker-compose.yml up -d
          # let the server start before running tests
          sleep 10
          docker exec cousins-matter python manage.py test

      - name: Show docker-compose services logs on failure
        if: failure()
        run: docker compose logs

      - name: test install script
        run: |
          # make sure no previous containers are running
          docker compose down -v
          ./scripts/tests/test_install.sh

      - name: test migrate v1 to v2 script
        run: |
          # make sure no previous containers are running
          docker compose down -v
          ./scripts/tests/test_migrate_v1_v2.sh

      - name: test create superuser script
        run: |
          ./scripts/tests/test_create_superuser.sh

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: remove tests resources from .dockerignore before real build
        run: |
          echo '**/tests/' >> .dockerignore

      - name: Determine version
        id: get_version
        run: |
            if [[ ${{ github.event_name }} == 'release' ]]; then
              echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            elif [[ ${{ github.ref }} == refs/tags/* ]]; then
              echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            else
              echo "VERSION=$(git describe --tags --abbrev=0)+$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            fi
      
      - name: Create release.txt
        run: echo ${{ steps.get_version.outputs.VERSION }} > release.txt

      - name: Upload release.txt
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release.txt

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: ${{ env.PUSH }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
