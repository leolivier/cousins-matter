# Generated by Django 5.2 on 2025-04-20 15:16

import django.db.models.deletion as deletion
from django.db import migrations, models
from django.utils import timezone

ClassesToMigrate = [
    'YesNoAnswer',
    'ChoiceAnswer',
    'DateTimeAnswer',
    'TextAnswer'
]


def get_subclasses_to_migrate(apps):
    "List of all concrete subclasses to be processed"
    # Recover models in the state of this migration using get_model.
    # This is crucial for working with the diagram at this precise point in the history of migration.
    return [apps.get_model('polls', cls_name) for cls_name in ClassesToMigrate]


def get_tables_to_migrate():
    "List of all models to be processed"
    return [f"polls_{subclass.lower()}" for subclass in ClassesToMigrate]


def rename_subanswer_tables():
    """
    Rename all the tables of the sub-classes of Answer
    """
    tables = get_tables_to_migrate()
    queries = [f"ALTER TABLE {table} RENAME TO {table}_old;" for table in tables]
    reverse_queries = [f"ALTER TABLE {table}_old RENAME TO {table};" for table in tables]
    return '\n'.join(queries), '\n'.join(reverse_queries)


def drop_old_subanswer_tables():
    """
    Drop all the old tables of the sub-classes of Answer
    """
    old_tables = [f"{table}_old" for table in get_tables_to_migrate()]
    queries = [f"DROP TABLE {old_table};" for old_table in old_tables]
    return '\n'.join(queries), ''


def migrate_answer_subclass_data_to_base_answer(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    PollAnswer = apps.get_model('polls', 'PollAnswer')
    Question = apps.get_model('polls', 'Question')
    # Iterate over each concrete subclass
    for Subclass in get_subclasses_to_migrate(apps):
        old_table = f"polls_{Subclass._meta.model_name}_old"
        # Get a database cursor to run raw SQL
        with schema_editor.connection.cursor() as cursor:
            cursor.execute(f"SELECT poll_answer_id, question_id, answer FROM {old_table};")
            rows = cursor.fetchall()  # Loads all rows (assumes it's not very large)
        # Iterate on old data and create new instances of Subclass
        # By passing through the ORM (X.objects.create), we ensure that all
        # model logic (save(), signals, etc.) is executed.
        created_count = 0
        for row in rows:
            poll_answer_id = row[0]
            question_id = row[1]
            answer = row[2]
            if Subclass._meta.model_name == 'datetimeanswer':  # needs to manage timezone
                answer = timezone.make_aware(answer)
            try:
                # Creates a new instance of Subclass using the values from the old table
                poll_answer = PollAnswer.objects.using(db_alias).get(id=poll_answer_id)
                question = Question.objects.using(db_alias).get(id=question_id)

                Subclass.objects.using(db_alias).create(
                    poll_answer=poll_answer,
                    question=question,
                    answer=answer
                )
                created_count += 1
            except Exception as e:
                # Handle possible errors (e.g. violated uniqueness constraint)
                print(f"Error creating object {Subclass._meta.model_name} for line ({poll_answer_id}, {question_id}): {e}")

        # print(f"\n{created_count} instances of {Subclass._meta.model_name} created from {old_table}.")


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('polls', '0003_alter_choiceanswer_answer_question_possible_choices_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poll_answer', models.ForeignKey(on_delete=deletion.CASCADE, to='polls.pollanswer')),
                ('question', models.ForeignKey(on_delete=deletion.CASCADE, to='polls.question',
                 related_name='answers_%(class)s')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=deletion.CASCADE,
                                                        related_name='polymorphic_%(app_label)s.%(class)s_set+',
                                                        to='contenttypes.contenttype')), 
            ],
            options={
                'verbose_name': 'answer',
                'verbose_name_plural': 'answers',
            },
        ),
        migrations.AlterField(
            model_name='question',
            name='question_type',
            field=models.CharField(choices=[('YN', 'Yes/No'), ('SC', 'Single Choice'), ('MC', 'Multiple Choices'),
                                            ('OT', 'Open Text'), ('DT', 'Date')],
                                   default='YN', max_length=2, verbose_name='Question Type'),
        ),
        # -- disable constraints checking
        migrations.RunSQL(sql="PRAGMA foreign_keys = OFF;", reverse_sql="PRAGMA foreign_keys = ON;"),
        # -- rename tables
        migrations.RunSQL(*rename_subanswer_tables()),
        # Create new tables
        migrations.CreateModel(
            name='ChoiceAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE, parent_link=True,
                                                    primary_key=True, serialize=False, to='polls.answer')),
                ('answer', models.CharField(max_length=100, verbose_name='Answer')),
            ],
            options={
                'verbose_name': 'choice answer',
                'verbose_name_plural': 'choice answers',
            },
            bases=('polls.answer',),
        ),
        migrations.CreateModel(
            name='DateTimeAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE, parent_link=True,
                                                    primary_key=True, serialize=False, to='polls.answer')),
                ('answer', models.DateTimeField(default=timezone.now, verbose_name='answer')),
            ],
            options={
                'verbose_name': 'datetime answer',
                'verbose_name_plural': 'datetime answers',
            },
            bases=('polls.answer',),
        ),
        migrations.CreateModel(
            name='YesNoAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE, parent_link=True,
                                                    primary_key=True, serialize=False, to='polls.answer')),
                ('answer', models.BooleanField(default=False, verbose_name='answer')),
            ],
            options={
                'verbose_name': 'yes/no answer',
                'verbose_name_plural': 'yes/no answers',
            },
            bases=('polls.answer',),
        ),
        migrations.CreateModel(
            name='TextAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE, parent_link=True,
                                                    primary_key=True, serialize=False, to='polls.answer')),
                ('answer', models.TextField(blank=True, default='', max_length=500, verbose_name='answer')),
            ],
            options={
                'verbose_name': 'text answer',
                'verbose_name_plural': 'text answers',
            },
            bases=('polls.answer',),
        ),

        # Migrate data
        migrations.RunPython(migrate_answer_subclass_data_to_base_answer, reverse_code=migrations.RunPython.noop),
        # Remove old tables
        migrations.RunSQL(*drop_old_subanswer_tables()),
        # Re-enable constraints checking
        migrations.RunSQL(sql="PRAGMA foreign_keys = ON;", reverse_sql="PRAGMA foreign_keys = ON;"),
        # -- update model options
        migrations.AlterModelOptions(
            name='poll',
            options={'ordering': ['pub_date'], 'verbose_name': 'poll', 'verbose_name_plural': 'polls'},
        ),
        migrations.AlterModelOptions(
            name='pollanswer',
            options={'verbose_name': 'poll answer', 'verbose_name_plural': 'poll answers'},
        ),
        migrations.AlterModelOptions(
            name='question',
            options={'ordering': ['id'], 'verbose_name': 'question', 'verbose_name_plural': 'questions'},
        ),
        # new models
        migrations.CreateModel(
            name='MultiChoiceAnswer',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE,
                                                    parent_link=True, primary_key=True, serialize=False, to='polls.answer')),
                ('answer', models.JSONField(blank=True, default=list, verbose_name='choices')),
            ],
            options={
                'verbose_name': 'multiple choice answer',
                'verbose_name_plural': 'multiple choice answers',
            },
            bases=('polls.answer',),
        ),

        # event planner management
        migrations.CreateModel(
            name='EventPlanner',
            fields=[
                ('poll_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE,
                                                  parent_link=True, primary_key=True, serialize=False, to='polls.poll')),
                ('location', models.CharField(blank=True, default='', max_length=250, verbose_name='location')),
                ('chosen_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'event planner',
                'verbose_name_plural': 'event planners',
            },
            bases=('polls.poll',),
        ),
        migrations.CreateModel(
            name='MultiEventAnswer',
            fields=[
                ('multichoiceanswer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE,
                                                               parent_link=True, primary_key=True, serialize=False,
                                                               to='polls.multichoiceanswer')),
            ],
            options={
                'verbose_name': 'multiple event answer',
                'verbose_name_plural': 'multiple event answers',
            },
            bases=('polls.multichoiceanswer',),
        ),
        migrations.CreateModel(
            name='SingleEventAnswer',
            fields=[
                ('choiceanswer_ptr', models.OneToOneField(auto_created=True, on_delete=deletion.CASCADE,
                                                          parent_link=True, primary_key=True, serialize=False,
                                                          to='polls.choiceanswer')),
            ],
            options={
                'verbose_name': 'single event answer',
                'verbose_name_plural': 'single event answers',
            },
            bases=('polls.choiceanswer',),
        ),

    ]
