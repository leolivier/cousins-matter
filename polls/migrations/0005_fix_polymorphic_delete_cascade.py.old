# Generated by Django 5.2 on 2025-04-20 18:10

from django.db import migrations


# Utility functions to generate SQL script for table recreation
def create_recreate_answer_sql(model_lower, answer_type):
    """
    Generates SQL script to recreate a subclass table in SQLite
    with the correct FK ON DELETE CASCADE constraint.
    """
    table = f"polls_{model_lower}"
    sql = f"""
    -- Rename the table
    ALTER TABLE {table} RENAME TO {table}_old;
    -- Create the new table with the same fields
    CREATE TABLE {table} (
        answer_ptr_id bigint PRIMARY KEY REFERENCES polls_answer ("id") ON DELETE CASCADE,
        answer {answer_type} NOT NULL
    );
    -- Copy data from old table to new one
    INSERT INTO {table} (answer_ptr_id, answer) SELECT answer_ptr_id, answer FROM {table}_old;
    -- Remove the old table
    DROP TABLE {table}_old;
    """
    reverse_sql = f"""
    ALTER TABLE {table} RENAME TO {table}_new;
    ALTER TABLE {table}_old RENAME TO {table};
    DROP TABLE {table}_new;
    """  # Simplified, does not restore original constraint

    # print(sql, reverse_sql)
    return sql, reverse_sql


def create_recreate_subanswer_sql(submodel_lower, parent_model_lower):
    """
    Generates SQL script to recreate a sub-subclass table in SQLite
    with the correct FK ON DELETE CASCADE constraint.
    """
    subtable = f"polls_{submodel_lower}"
    parent_table = f"polls_{parent_model_lower}"
    sql = f"""
    -- Rename the table
    ALTER TABLE {subtable} RENAME TO {subtable}_old;
    -- Create the new table with the same fields
    CREATE TABLE {subtable} (
        {parent_model_lower}_ptr_id bigint PRIMARY KEY REFERENCES {parent_table} ("answer_ptr_id") ON DELETE CASCADE
    );
    -- Copy data from old table to new one
    INSERT INTO {subtable} ({parent_model_lower}_ptr_id)
      SELECT {parent_model_lower}_ptr_id FROM {subtable}_old;
    -- Remove the old table
    DROP TABLE {subtable}_old;
    """
    reverse_sql = f"""
    ALTER TABLE {subtable} RENAME TO {subtable}_new;
    ALTER TABLE {subtable}_old RENAME TO {subtable};
    DROP TABLE {subtable}_new;
    """  # Simplified, does not restore original constraint

    # print(sql, reverse_sql)
    return sql, reverse_sql


class Migration(migrations.Migration):

    dependencies = [
        ('polls', '0004_answer_eventplanner_singleeventanswer_and_more'),
    ]

    operations = [
        # Disable foreign key checking to allow modification
        migrations.RunSQL(sql="PRAGMA foreign_keys = OFF;", reverse_sql="PRAGMA foreign_keys = ON;"),
        # recreate answer table
        migrations.RunSQL(sql="""
            ALTER TABLE polls_answer RENAME TO polls_answer_old;
            CREATE TABLE polls_answer (
                id bigint PRIMARY KEY,
                question_id bigint NOT NULL REFERENCES polls_question ("id") ON DELETE CASCADE,
                poll_answer_id bigint NOT NULL REFERENCES polls_pollanswer ("id") ON DELETE CASCADE,
                polymorphic_ctype_id INTEGER REFERENCES django_content_type ON DELETE CASCADE
            );
            INSERT INTO polls_answer (id, question_id, poll_answer_id, polymorphic_ctype_id)
                          SELECT id, question_id, poll_answer_id, polymorphic_ctype_id
                          FROM polls_answer_old;
            DROP TABLE IF EXISTS polls_answer_old;
            """),
        # Recreate sub tables
        migrations.RunSQL(*create_recreate_answer_sql('choiceanswer', 'varchar(100)')),
        migrations.RunSQL(*create_recreate_answer_sql('datetimeanswer', 'datetime')),
        migrations.RunSQL(*create_recreate_answer_sql('textanswer', 'text')),
        migrations.RunSQL(*create_recreate_answer_sql('yesnoanswer', 'bool')),
        migrations.RunSQL(*create_recreate_answer_sql('multichoiceanswer', 'text')),
        migrations.RunSQL(*create_recreate_subanswer_sql('singleeventanswer', 'choiceanswer')),
        migrations.RunSQL(*create_recreate_subanswer_sql('multieventanswer', 'multichoiceanswer')),
        # Reactivate foreign key checks at the end of migration
        migrations.RunSQL(sql="PRAGMA foreign_keys = ON;", reverse_sql="PRAGMA foreign_keys = OFF;"),
    ]
