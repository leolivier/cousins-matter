#!/usr/bin/env python3

"""
Rotate SECRET_KEY in .env and maintain PREVIOUS_SECRET_KEYS

Behavior:
- If SECRET_KEY is missing in .env, generate one and append:
    # Don't change these 2 lines, they are automatically generated by rotate-secrets.sh
    SECRET_KEY='<new_key>'
    PREVIOUS_SECRET_KEYS=''
  then exit with status 1.
- Otherwise, rotate SECRET_KEY to a new value and:
    - If PREVIOUS_SECRET_KEYS is missing or exists and is empty, set it with the old SECRET_KEY.
    - If PREVIOUS_SECRET_KEYS exists and is non-empty, append ,<old_secret> to it.

Notes:
- Reads and modifies only the first matching occurrence of each variable.
- Values can be single or double-quoted; surrounding quotes are stripped when reading and reapplied on write.
- Trailing comments after values are ignored when reading (anything after first whitespace is dropped).
"""

import string
import sys
from .utils import get_regex, generate_key, strip_quotes, read_env, write_env

SEC_REGEX = get_regex("SECRET_KEY")
PREV_REGEX = get_regex("PREVIOUS_SECRET_KEYS")
# Allowed characters for SECRET_KEY
ALLOWED_CHARS = string.ascii_letters + string.digits + "!@#$%^*()_-+={}[]:;<>?."


def rotate_secrets() -> int:
    # Load .env
    env = read_env()

    # If SECRET_KEY missing: create and append comment + keys, then exit 1
    secret_match = SEC_REGEX.search(env)
    if secret_match is None:
        print("no SECRET_KEY variable found in .env, generating one")
        new_key = generate_key(ALLOWED_CHARS)
        env += f"""
    # Don't change these 2 lines, they are automatically generated by rotate-secrets.sh
    SECRET_KEY='{new_key}'
    PREVIOUS_SECRET_KEYS=''
    """
        write_env(env)
        return 1

    old_secret = strip_quotes(secret_match.group(1))
    # Rotate SECRET_KEY
    new_key = generate_key(ALLOWED_CHARS)
    env = env.replace(secret_match.group(0), f"SECRET_KEY='{new_key}'")

    # Update PREVIOUS_SECRET_KEYS
    prev_secret_match = PREV_REGEX.search(env)
    if prev_secret_match is None:  # no prev secrets, generate one
        env += f"PREVIOUS_SECRET_KEYS='{old_secret}'"
    else:
        prev_val = strip_quotes(prev_secret_match.group(1))
        combined = f"{prev_val},{old_secret}" if old_secret else prev_val
        env = env.replace(prev_secret_match.group(0), f"PREVIOUS_SECRET_KEYS='{combined}'")

    write_env(env)

    print("Old SECRET_KEY added to PREVIOUS_SECRET_KEYS in .env")
    print("SECRET_KEY rotated successfully")
    return 0


if __name__ == "__main__":
    sys.exit(rotate_secrets())
